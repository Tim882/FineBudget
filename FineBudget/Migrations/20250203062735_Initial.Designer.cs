// <auto-generated />
using System;
using FineBudget;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FineBudget.Migrations
{
    [DbContext(typeof(BudgetContext))]
    [Migration("20250203062735_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Models.DbModels.BalanceItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("BalanceItems");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Models.DbModels.BaseModels.Operation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BalanceItemId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BalanceItemId");

                    b.ToTable("Operations");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Models.DbModels.MainModels.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Models.DbModels.MainModels.Asset", b =>
                {
                    b.HasBaseType("Models.DbModels.BalanceItem");

                    b.Property<int>("AssetType")
                        .HasColumnType("integer");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("Models.DbModels.MainModels.Liability", b =>
                {
                    b.HasBaseType("Models.DbModels.BalanceItem");

                    b.Property<int>("LiabilityType")
                        .HasColumnType("integer");

                    b.ToTable("Liabilities");
                });

            modelBuilder.Entity("Models.DbModels.MainModels.Cost", b =>
                {
                    b.HasBaseType("Models.DbModels.BaseModels.Operation");

                    b.Property<int>("CostCategory")
                        .HasColumnType("integer");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.ToTable("Costs");
                });

            modelBuilder.Entity("Models.DbModels.MainModels.Income", b =>
                {
                    b.HasBaseType("Models.DbModels.BaseModels.Operation");

                    b.Property<int>("IncomeCategory")
                        .HasColumnType("integer");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("Models.DbModels.BaseModels.Operation", b =>
                {
                    b.HasOne("Models.DbModels.MainModels.Account", "Account")
                        .WithMany("Operations")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.DbModels.BalanceItem", "BalanceItem")
                        .WithMany()
                        .HasForeignKey("BalanceItemId");

                    b.Navigation("Account");

                    b.Navigation("BalanceItem");
                });

            modelBuilder.Entity("Models.DbModels.MainModels.Asset", b =>
                {
                    b.HasOne("Models.DbModels.BalanceItem", null)
                        .WithOne()
                        .HasForeignKey("Models.DbModels.MainModels.Asset", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.DbModels.MainModels.Liability", b =>
                {
                    b.HasOne("Models.DbModels.BalanceItem", null)
                        .WithOne()
                        .HasForeignKey("Models.DbModels.MainModels.Liability", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.DbModels.MainModels.Cost", b =>
                {
                    b.HasOne("Models.DbModels.BaseModels.Operation", null)
                        .WithOne()
                        .HasForeignKey("Models.DbModels.MainModels.Cost", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.DbModels.MainModels.Income", b =>
                {
                    b.HasOne("Models.DbModels.BaseModels.Operation", null)
                        .WithOne()
                        .HasForeignKey("Models.DbModels.MainModels.Income", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.DbModels.MainModels.Account", b =>
                {
                    b.Navigation("Operations");
                });
#pragma warning restore 612, 618
        }
    }
}
